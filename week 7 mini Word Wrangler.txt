http://www.codeskulptor.org/#user43_kwL20DN1Jx96PYX_1.py

"""
Student code for Word Wrangler game
"""

import urllib2
import codeskulptor
import poc_wrangler_provided as provided
import math
import random

WORDFILE = "assets_scrabble_words3.txt"


# Functions to manipulate ordered word lists

def remove_duplicates(list1):
    """
    Eliminate duplicates in a sorted list.

    Returns a new sorted list with the same elements in list1, but
    with no duplicates.

    This function can be iterative.
    """
    # get a number count dictionary
    dic1 = {}
    for item in list1:
        if dic1.has_key(item) == False:
            dic1[item] = 1
        elif dic1.has_key(item) == True:
            dic1[item] += 1
    newlist = list1[:]
    for item in list1:
        if dic1[item] > 1:
            newlist.remove(item)
            dic1[item] -= 1
    return newlist

def intersect(list1, list2):
    """
    Compute the intersection of two sorted lists.

    Returns a new sorted list containing only elements that are in
    both list1 and list2.

    This function can be iterative.
    """
    dic1 = {}
    for item in list1:
        if dic1.has_key(item) == False:
            dic1[item] = 1
        elif dic1.has_key(item) == True:
            dic1[item] += 1    
    newlist = []
    for item in list2:
        if dic1.has_key(item) and dic1[item] >= 1:
            newlist.append(item)
            dic1[item] -= 1
    return newlist

# Functions to perform merge sort

def merge(list1, list2):
    """
    Merge two sorted lists.

    Returns a new sorted list containing those elements that are in
    either list1 or list2.

    This function can be iterative.
    """   
    newlist = []
    dummy_a = 0
    dummy_b = 0
    for dummy_idx in range(len(list1)+len(list2)):
        if dummy_a < len(list1) and dummy_b < len(list2): 
            if list1[dummy_a] < list2[dummy_b]:
                newlist.append(list1[dummy_a])
                dummy_a += 1
            elif list1[dummy_a] > list2[dummy_b]:
                newlist.append(list2[dummy_b])
                dummy_b += 1
            elif list1[dummy_a] == list2[dummy_b]:
                newlist.append(list1[dummy_a])
                newlist.append(list2[dummy_b])
                dummy_a += 1
                dummy_b += 1
        elif dummy_a == len(list1) and dummy_b < len(list2):
            newlist = newlist + list2[dummy_b:]
            return newlist
        elif dummy_a < len(list1) and dummy_b == len(list2):
            newlist = newlist + list1[dummy_a:]
            return newlist    
    return newlist
                
def merge_sort(list1):
    """
    Sort the elements of list1.

    Return a new sorted list with the same elements as list1.

    This function should be recursive.
    """
    if len(list1) > 2:
        newlist1 = list1[0: int(math.floor(len(list1)/2))]
        newlist2 = list1[int(math.floor(len(list1)/2)):]
    elif len(list1) == 2:
        if list1[0] <= list1[1]:
            return [list1[0], list1[1]]
        elif list1[0] > list1[1]:
            return [list1[1], list1[0]]
    elif len(list1) == 1:
        return list1
    elif len(list1) == 0:
        return []
    return merge(merge_sort(newlist1), merge_sort(newlist2))

# Function to generate all strings for the word wrangler game

def gen_all_strings(word):
    """
    Generate all strings that can be composed from the letters in word
    in any order.

    Returns a list of all strings that can be formed from the letters
    in word.

    This function should be recursive.
    """
    if len(word) == 0:
        return [""]
    elif len(word) >= 0:
        first = word[0]
        rest = word[1:len(word)]
        rest_strings = gen_all_strings(rest)
        gen = []
        for string in rest_strings:
            for pos in range(len(string)+1):
                before = string[0: pos]
                after = string[pos:]
                new_string = before + first + after
                gen.append(new_string)
        return gen + rest_strings 

# Function to load words from a file

def load_words(filename):
    """
    Load word list from the file named filename.

    Returns a list of strings.
    """
    return []

def run():
    """
    Run game.
    """
    words = load_words(WORDFILE)
    wrangler = provided.WordWrangler(words, remove_duplicates, 
                                     intersect, merge_sort, 
                                     gen_all_strings)
    provided.run_game(wrangler)

# Uncomment when you are ready to try the game
# run() 
