
http://www.codeskulptor.org/#user43_XMgsiwPoYojmocc.py

"""
Student portion of Zombie Apocalypse mini-project
"""

import random
import poc_grid
import poc_queue
import poc_zombie_gui

# global constants
EMPTY = 0 
FULL = 1
FOUR_WAY = 0
EIGHT_WAY = 1
OBSTACLE = 5
HUMAN = 6
ZOMBIE = 7


class Apocalypse(poc_grid.Grid):
    """
    Class for simulating zombie pursuit of human on grid with
    obstacles
    """

    def __init__(self, grid_height, grid_width, obstacle_list = None, 
                 zombie_list = None, human_list = None):
        """
        Create a simulation of given size with given obstacles,
        humans, and zombies
        """
        poc_grid.Grid.__init__(self, grid_height, grid_width)
        
        if obstacle_list != None:
            self._obstacle_list = list(obstacle_list)
        else:
            self._obstacle_list = []
        
        if obstacle_list != None:
            for cell in obstacle_list:
                self.set_full(cell[0], cell[1])
                
        if zombie_list != None:
            self._zombie_list = list(zombie_list)
        else:
            self._zombie_list = []
            
        if human_list != None:
            self._human_list = list(human_list)  
        else:
            self._human_list = []
        
    def clear(self):
        """
        Set cells in obstacle grid to be empty
        Reset zombie and human lists to be empty
        """
        poc_grid.Grid.clear(self)
        self._zombie_list = []            
        self._human_list = []
        
    def add_zombie(self, row, col):
        """
        Add zombie to the zombie list
        """
        self._zombie_list.append(tuple([row,col]))
                
    def num_zombies(self):
        """
        Return number of zombies
        """
        return len(self._zombie_list)       
          
    def zombies(self):
        """
        Generator that yields the zombies in the order they were
        added.
        """
        # replace with an actual generator
        return self._zombie_list

    def add_human(self, row, col):
        """
        Add human to the human list
        """
        self._human_list.append(tuple([row,col]))
        
    def num_humans(self):
        """
        Return number of humans
        """
        return len(self._human_list)    
    
    def humans(self):
        """
        Generator that yields the humans in the order they were added.
        """
        # replace with an actual generator
        return self._human_list
        
    def compute_distance_field(self, entity_type):
        """
        Function computes and returns a 2D distance field
        Distance at member of entity_list is zero
        Shortest paths avoid obstacles and use four-way distances
        """
        
        # initialize the visited grid, distance_field list, and boundary queue 
        grid_height = poc_grid.Grid.get_grid_height(self)
        grid_width = poc_grid.Grid.get_grid_width(self)
        self._visited = poc_grid.Grid(grid_height, grid_width)
        self._distance_field = [[(grid_height * grid_width) for dummy_col in range(self._grid_width)]
                                 for dummy_row in range(self._grid_height)]     
        self._boundary = poc_queue.Queue()
                
        # read data in human and zoombie list, set visited grid cells as FULL and distance of zero 
        if entity_type == ZOMBIE:
            for zombie in self._zombie_list:
                self._boundary.enqueue((zombie[0], zombie[1]))
                self._visited.set_full(zombie[0],zombie[1])
                self._distance_field[zombie[0]][zombie[1]] = 0
        elif entity_type == HUMAN:
            for human in self._human_list:
                self._boundary.enqueue((human[0], human[1])) 
                self._visited.set_full(human[0],human[1])
                self._distance_field[human[0]][human[1]] = 0  
                
        # set visited for full for obstacle list
        for obstacle in self._obstacle_list:
            self._visited.set_full(obstacle[0], obstacle[1])        
                      
        # using breadth-first search algorithm 
        while self._boundary._items != []:
            cell = self._boundary.dequeue()
            neighbors = self._visited.four_neighbors(cell[0], cell[1])
            for neighbor in neighbors:
                if self._visited.is_empty(neighbor[0], neighbor[1]):
                    self._visited.set_full(neighbor[0], neighbor[1])
                    self._boundary.enqueue(neighbor)
                    self._distance_field[neighbor[0]][neighbor[1]] = self._distance_field[cell[0]][cell[1]] + 1 
        
        # return the distance_field
        return self._distance_field
        
    def move_humans(self, zombie_distance_field):
        """
        Function that moves humans away from zombies, diagonal moves
        are allowed
        """
        for dummy_idx in range(len(self._human_list)):
            human = self._human_list[dummy_idx]
            # get possible positions for human to move
            neighbors = self.eight_neighbors(human[0], human[1])
            neighbors.append(human)
            empty_pos = []
            distances = []
            for neighbor in neighbors: 
                if self.is_empty(neighbor[0], neighbor[1]) == True:
                    empty_pos.append(tuple(neighbor))
                    distances.append(zombie_distance_field[neighbor[0]][neighbor[1]])            
            # get the optimal positions for human to move
            max_distance = max(distances)
            optimal_pos = []
            for dummy_idy in range(len(distances)):
                if distances[dummy_idy] >= max_distance:
                    optimal_pos.append(empty_pos[dummy_idy])
            optimal = random.choice(optimal_pos)
            # move human to the optimal position
            self._human_list[dummy_idx] = optimal
                
    def move_zombies(self, human_distance_field):
        """
        Function that moves zombies towards humans, no diagonal moves
        are allowed
        """
        for dummy_idx in range(len(self._zombie_list)):
            zombie = self._zombie_list[dummy_idx]
            # get possible positions for human to move
            neighbors = self.four_neighbors(zombie[0], zombie[1])
            neighbors.append(zombie)
            empty_pos = []
            distances = []
            for neighbor in neighbors: 
                if self.is_empty(neighbor[0], neighbor[1]) == True:
                    empty_pos.append(tuple(neighbor))
                    distances.append(human_distance_field[neighbor[0]][neighbor[1]])            
            # get the optimal positions for human to move
            min_distance = min(distances)
            optimal_pos = []
            for dummy_idy in range(len(distances)):
                if distances[dummy_idy] <= min_distance:
                    optimal_pos.append(empty_pos[dummy_idy])
            optimal = random.choice(optimal_pos)
            # move human to the optimal position
            self._zombie_list[dummy_idx] = optimal

# Start up gui for simulation - You will need to write some code above
# before this will work without errors
