http://www.codeskulptor.org/#user43_VaF3U6a5iV_6.py

"""
Cookie Clicker Simulator
"""

import simpleplot
import math
import random

# Used to increase the timeout, if necessary
import codeskulptor
codeskulptor.set_timeout(20)

import poc_clicker_provided as provided

# Constants
SIM_TIME = 10000000000.0
MAGIC_TIME = 100

class ClickerState:
    """
    Simple class to keep track of the game state.
    """
    
    def __init__(self):
        """
        Initialize state
        """
        self._total_cookies = 0.0
        self._current_cookies = 0.0
        self._current_time = 0.0
        self._current_cps = 1.0
        self._history = [(0.0, None, 0.0, 0.0)]
        
    def __str__(self):
        """
        Return human readable state
        """
        return ("Total cookies: " + str(self._total_cookies) 
    + ". Current cookies: " + str(self._current_cookies) 
    + ". Current time is " + str(self._current_time)
    + ". Current CPS is " + str(self._current_cps)
    + ". History is " + str(self._history))
        
    def get_cookies(self):
        """
        Return current number of cookies 
        (not total number of cookies)
        
        Should return a float
        """
        return self._current_cookies
    
    def get_cps(self):
        """
        Get current CPS

        Should return a float
        """
        return self._current_cps
    
    def get_time(self):
        """
        Get current time

        Should return a float
        """
        return self._current_time
    
    def get_history(self):
        """
        Return history list

        History list should be a list of tuples of the form:
        (time, item, cost of item, total cookies)

        For example: [(0.0, None, 0.0, 0.0)]

        Should return a copy of any internal data structures,
        so that they will not be modified outside of the class.
        """
        return self._history

    def time_until(self, cookies):
        """
        Return time until you have the given number of cookies
        (could be 0.0 if you already have enough cookies)

        Should return a float with no fractional part
        """
        if cookies >= self._current_cookies:
            time = (cookies - self._current_cookies) / self._current_cps
        elif cookies < self._current_cookies:
            time = 0
        return math.ceil(time)
    
    def wait(self, time):
        """
        Wait for given amount of time and update state

        Should do nothing if time <= 0.0
        """
        if time > 0.0:
            self._current_time = self._current_time + time
            self._current_cookies = self._current_cookies + time * self._current_cps
            self._total_cookies = self._total_cookies + time * self._current_cps
        
        
    
    def buy_item(self, item_name, cost, additional_cps):
        """
        Buy an item and update state

        Should do nothing if you cannot afford the item
        """
        if self._current_cookies >= cost:
            self._current_cookies = self._current_cookies - cost
            self._current_cps = self._current_cps + additional_cps
            new_tuple = (self._current_time, item_name, cost, self._total_cookies)
            self._history.append(new_tuple)
    
def simulate_clicker(build_info, duration, strategy):
    """
    Function to run a Cookie Clicker game for the given
    duration with the given strategy.  Returns a ClickerState
    object corresponding to the final state of the game.
    """

    copy = build_info.clone()
    clicker = ClickerState()
    
    # 1 check the current time if the duration has been passed
    while clicker.get_time() < duration:
        current_cookies = clicker.get_cookies()
        current_cps = clicker.get_cps()
        history = clicker.get_history()
        time_left = duration - clicker.get_time()
        item = strategy(current_cookies, current_cps, history, time_left, copy)
        # 2 break loop if function returns None
        if item == None:
            # just wait till time ends
            clicker.wait(time_left)
            break    
        else:
            # 3 determine time elapse
            cost_of_item = copy.get_cost(item)
            wait_time = clicker.time_until(cost_of_item)
            # 4 check if we need to wait
            if wait_time == 0:
                cps_of_item = copy.get_cps(item)
                clicker.buy_item(item, cost_of_item, cps_of_item)
                copy.update_item(item)
            # if we do need to wait 
            elif wait_time <= time_left:
                clicker.wait(wait_time)
                # 5 buy the item
                cps_of_item = copy.get_cps(item)
                clicker.buy_item(item, cost_of_item, cps_of_item)
                # 6 update the bulid information
                copy.update_item(item)
            # if we do not have time, just pass the time left
            elif wait_time > time_left:
                clicker.wait(time_left)
            
    # check the last seconds
    if clicker.get_time() == duration:
        current_cookies = clicker.get_cookies()
        current_cps = clicker.get_cps()
        history = clicker.get_history()
        time_left = duration - clicker.get_time()
        item = strategy(current_cookies, current_cps, history, time_left, copy)
        if item == None:
            return clicker
        else:
            cost_of_item = copy.get_cost(item)
            wait_time = clicker.time_until(cost_of_item)
            if wait_time == 0:
                cps_of_item = copy.get_cps(item)
                clicker.buy_item(item, cost_of_item, cps_of_item)
                copy.update_item(item) 
    
    return clicker

def strategy_cursor_broken(cookies, cps, history, time_left, build_info):
    """
    Always pick Cursor!

    Note that this simplistic (and broken) strategy does not properly
    check whether it can actually buy a Cursor in the time left.  Your
    simulate_clicker function must be able to deal with such broken
    strategies.  Further, your strategy functions must correctly check
    if you can buy the item in the time left and return None if you
    can't.
    """
    return "Cursor"

def strategy_none(cookies, cps, history, time_left, build_info):
    """
    Always return None

    This is a pointless strategy that will never buy anything, but
    that you can use to help debug your simulate_clicker function.
    """
    return None

def strategy_cheap(cookies, cps, history, time_left, build_info):
    """
    Always buy the cheapest item you can afford in the time left.
    """
    # get all the value of the items, and the minium cost of the item
    items = build_info.build_items()
    values = []
    for dummy_idx in range(len(items)):
        cost = build_info.get_cost(items[dummy_idx])
        values.append(cost)
    min_value = min(values)
   
    
    # get a cheapest item
    if cookies + cps * time_left < min_value :
        return None
    else:
        min_items = []
        for dummy_idy in range(len(items)):
            if build_info.get_cost(items[dummy_idy]) == min_value: 
                min_items.append(items[dummy_idy])      
    return random.choice(min_items)

def strategy_expensive(cookies, cps, history, time_left, build_info):
    """
    Always buy the most expensive item you can afford in the time left.
    """
    # get all the value of the items, and the cost of the item
    items = build_info.build_items()
    values = []
    for dummy_idx in range(len(items)):
        cost = build_info.get_cost(items[dummy_idx])
        values.append(cost)
    
    # if he could not afford any of the item
    if cookies + cps * time_left < min(values):
        return None

    # get an list of affordable items and corresponding list of affordable values
    else:    
        affordable_items = []
        affordable_values = []
        for dummy_idy in range(len(items)):
            if cookies + cps * time_left >= build_info.get_cost(items[dummy_idy]):        
                affordable_items.append(items[dummy_idy])
                affordable_values.append( build_info.get_cost(items[dummy_idy]))
        
       
        # get the most expensive item
        max_value = max(affordable_values)
        max_items = []
        for dummy_idz in range(len(affordable_items)):
            if affordable_values[dummy_idz] == max_value: 
                max_items.append(affordable_items[dummy_idz])
        return random.choice(max_items)
                       
def strategy_best(cookies, cps, history, time_left, build_info):
    """
    The best strategy that you are able to implement.
    I design a strategy that:
    at beginning get the cheapest one, then gradually get more expensive ones, as long as the cheapest one 
    is more than 20, we just drop this one and progress to the next one.
  
    """
    
    
    
    items = {}  
    for item in build_info.build_items():  
        if build_info.get_cost(item) <= cookies + cps * time_left :  
            items[build_info.get_cps(item)/build_info.get_cost(item)] = item  
    if len(items) > 0:  
        return items[max(items)]  
    elif len(items) == 0:   
        return None  
    
         
        